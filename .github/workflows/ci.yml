name: unpack

on:
  workflow_dispatch:
     inputs:
       mode:
         description: 'Download mode(aria2c,curl,axel,wget)'
         required: true
         default: 'aria2c'
       output:
         description: 'Output(wget=O)'
         required: true
         default: 'o'
       filename:
         description: 'ROM NAME'
         default: ''
       filelink:
         description: 'ROM LINK'
         required: true
       boot:
         description: 'Boot Extracting'
         required: true
         default: 'true'
       audio:
         description: 'Audio XML Extracting'
         required: true
         default: 'true'
       acdb:
         description: 'ACDB Extracting'
         required: true
         default: 'true'
       power_profile:
         description: 'power_profile Extracting'
         required: true
         default: 'true'

jobs:
  unpack:
    runs-on: ubuntu-18.04
    continue-on-error: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialization environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git openjdk-8-jdk wget curl rsync aria2 python python3 unzip device-tree-compiler brotli simg2img img2simg axel
          pip3 install protobuf
          pip install brotli

      - id: var
        name: Download
        run: |
          echo "Download"
          if [[ ${{ github.event.inputs.filelink }} == *"drive.google.com"* ]]; then
              if [[ ${{ github.event.inputs.filelink }} == *"file"* ]]; then
                  DOWNLOAD_LINK=$(echo ${{ github.event.inputs.filelink }} | cut -d / -f 6)
                  echo "DOWNLOAD_LINK: $DOWNLOAD_LINK"
                  gdown https://drive.google.com/uc?id=${DOWNLOAD_LINK}
              elif [[ ${{ github.event.inputs.filelink }} == *"id"* ]]; then
                  DOWNLOAD_LINK1=$(echo ${{ github.event.inputs.filelink }} | cut -d = -f 2 | cut -d '&' -f 1)
                  DOWNLOAD_LINK2=$(echo ${{ github.event.inputs.filelink }} | cut -d = -f 4)
                  echo "DOWNLOAD_LINK1: $DOWNLOAD_LINK1"
                  echo "DOWNLOAD_LINK2: $DOWNLOAD_LINK2"
                  gdown https://drive.google.com/uc?id=${DOWNLOAD_LINK1} || gdown https://drive.google.com/uc?id=${DOWNLOAD_LINK2}
              fi
          else
              if [[ ! -z "${{ github.event.inputs.filename }}" ]]; then
                  FILENAME="${{ github.event.inputs.filename }}"
                  ${{ github.event.inputs.mode }} ${{ github.event.inputs.filelink }} -${{ github.event.inputs.output }} "$FILENAME"
              else
                  ${{ github.event.inputs.mode }} ${{ github.event.inputs.filelink }}
              fi
          fi
          ls
          FILENAME="$(ls -lS * | head -1 | awk '{print $9}')"
          echo "FILENAME: $FILENAME"
          FILENAME=$(basename ${FILENAME})
          NAME=$(basename $FILENAME .zip)
          echo "::set-output name=filename::$FILENAME"
          echo "::set-output name=name::$NAME"

      - name: Payload Extracting
        run: |
          echo "Payload Dumper"
          if [[ ! -z "echo $(echo ${{ steps.var.outputs.filename }} | grep ".zip")" ]]; then
              unzip ${{ steps.var.outputs.filename }}
          else
              tar zxvf ${{ steps.var.outputs.filename }}
              mv *images*/images/* ./
              ls -al
          fi
          rm -rf ${{ steps.var.outputs.filename }}
          if [[ -f "system.new.dat.br" ]]; then
              echo "system.new.dat.br Exist"
              brotli --decompress system.new.dat.br -o system.new.dat
              ./sdat2img.py system.transfer.list system.new.dat system.img > /dev/null 2>&1
          fi
          if [[ -f "vendor.new.dat.br" ]]; then
              brotli --decompress vendor.new.dat.br -o vendor.new.dat
              ./sdat2img.py vendor.transfer.list vendor.new.dat vendor.img > /dev/null 2>&1
          fi
          if [[ -f "payload.bin" ]]; then
              python3 update-payload-extractor/extract.py payload.bin --output_dir ./
          fi
          if [[ -f "firmware-update/dtbo.img" ]]; then
              mv firmware-update/dtbo.img output/dtbo.img || true
          fi
          if [[ -f "firmware-update/vbmeta.img" ]]; then
              mv firmware-update/vbmeta.img output/vbmeta.img || true
          fi
          if [[ -f "dtbo.img" ]]; then
              mv dtbo.img output/dtbo.img
          fi
          if [[ -f "vbmeta.img" ]]; then
              mv vbmeta.img output/vbmeta.img
          fi
          if [[ -f "recovery.img" ]]; then
              mv recovery.img output/recovery.img
          fi
          if [[ "${{ github.event.inputs.boot }}" == "true" ]]; then
              cp boot.img output/boot.img
          fi
          if [[ -d "META-INF" ]]; then
              mv -f META-INF output/
          fi
          tree
          cd ..

      - name: Fstab Extracting
        continue-on-error: true
        run: |
          mkdir system/
          sudo mount system.img system/
          if [[ -f "./vendor.img" ]]; then
              mkdir vendor/
              sudo mount vendor.img vendor/
              ls -al vendor/lib/hw/
              ls -al vendor/lib64/hw/
              sudo cp vendor/etc/fstab.qcom output/fstab.qcom
              cat vendor/etc/fstab.qcom
              if [[ "${{ github.event.inputs.audio }}" == "true" ]]; then
                  sudo cp vendor/etc/audio*.xml output/audio/ || true
                  sudo cp vendor/etc/bluetooth*.xml output/audio/ || true
                  sudo cp vendor/etc/mixer*.xml output/audio/ || true
                  sudo cp vendor/etc/graphite*.xml output/audio/ || true
                  sudo cp vendor/etc/listen*.xml output/audio/ || true
                  sudo cp vendor/etc/sound*.xml output/audio/ || true
              fi
              if [[ "${{ github.event.inputs.acdb }}" == "true" ]]; then
                  sudo cp -f vendor/etc/acdbdata/QRD/QRD* output/QRD/ || true
              fi
          else
              if [[ -f "system/system/vendor/etc/fstab.qcom" ]]; then
                  ver="system/"
              else
                  ver=""
              fi
              sudo cp ${ver}system/vendor/etc/fstab.qcom output/fstab.qcom
              cat ${ver}system/vendor/etc/fstab.qcom
              if [[ "${{ github.event.inputs.audio }}" == "true" ]]; then
                  sudo cp ${ver}system/vendor/etc/audio*.xml output/audio/ || true
                  sudo cp ${ver}system/vendor/etc/bluetooth*.xml output/audio/ || true
                  sudo cp ${ver}system/vendor/etc/mixer*.xml output/audio/ || true
                  sudo cp ${ver}system/vendor/etc/graphite*.xml output/audio/ || true
                  sudo cp ${ver}system/vendor/etc/listen*.xml output/audio/ || true
                  sudo cp ${ver}system/vendor/etc/sound*.xml output/audio/ || true
              fi
              if [[ "${{ github.event.inputs.acdb }}" == "true" ]]; then
                  sudo cp -r ${ver}system/vendor/etc/acdbdata/* output/acdbdata/ || true
              fi
          fi
          if [[ "${{ github.event.inputs.power_profile }}" == "true" ]]; then
                sudo cp ${ver}system/framework/framework-res.apk tmp/ || true
                cd tmp
                mv framework-res.apk framework-res.apk.zip || true
                unzip framework-res.apk.zip >/dev/null 2>&1 || true
                mv res/xml/power_profile.xml ../output/power_profile.xml || true
                cd ..
          fi
          if [[ -f "${ver}system/etc/device_features/*.xml" ]]; then
                sudo cp ${ver}system/etc/device_features/*.xml output/ || true
          fi
          if [[ -f "${ver}system/build.prop" ]]; then
              echo "build.prop"
              sudo cp ${ver}system/build.prop output/build.prop
              sudo chmod 777 output/build.prop
              sudo cat ${ver}system/build.prop
          fi
          sudo umount system
          sudo rm -rf system
          if [[ -f "./vendor.img" ]]; then
              sudo umount vendor
              sudo rm -rf vendor
          fi

      - name: ramdisk.cpio Extracting
        continue-on-error: true
        run: |
          cp boot.img tmp
          cd tmp
          ../magiskboot unpack -h boot.img
          if [[ -f "ramdisk.cpio" ]]; then
              echo "ramdisk.cpio已存在"
              cp ramdisk.cpio ../output/
              ls
              cpio -i -F ramdisk.cpio
          fi
          ls -al
          cd ..

      - name: mkboot
        continue-on-error: true
        run: |
          echo "mkbooting"
          cp boot.img mkboot/
          cd mkboot
          ./unpackbootimg -i boot.img
          rm boot.img
          ls
          ./mkbootimg --from-unpackbootimg-files boot -o boot.img || true
          ls

      - name: img_info&&dtb Extracting
        continue-on-error: true
        run: |
          echo "mkbooting"
          cp boot.img mkbootimg/
          cd mkbootimg
          ./mkboot boot.img boot
          rm boot.img
          cd boot
          ls -al
          mv kernel image.gz-dtb
          ../../split-appended-dtb image.gz-dtb || true
          mv *.dtb ../../output/dtb/ || true
          cd ${GITHUB_WORKSPACE}/output/dtb/
          for i in `find *.dtb`; do
            echo "$i"
            dts=${i%.*}.dts
            ../../dtbo2dts/dtc -q -I dtb -O dts -o $dts $i
          done
          cd ${GITHUB_WORKSPACE}/mkbootimg/boot
          cat img_info
          cp img_info ../../output/
          cd ../../

      - name: dtbo.img Extracting
        continue-on-error: true
        run: |
          echo "mkdting"
          if [[ -f "output/dtbo.img" ]]; then
              cp output/dtbo.img dtbo2dts/
              cd dtbo2dts
              python dtbo2dtsi.py
              rm dtbo.img
              ls -al
              line="$(grep -n "vbmeta" dtsi.0)"
              linea="$(echo $line | cut -d ":" -f 1)"
              lineb="`expr $linea + 24`""p"
              sed -n "$linea,$lineb" dtsi.*
              cp dtsi.* ../output/
              cd ../
          fi

      - name: vbmeta Extracting
        continue-on-error: true
        run: |
          echo "mkdting"
          if [[ -f "output/vbmeta.img" ]]; then
              hexdump -C output/vbmeta.img
          fi

      - name: Packing
        run: |
          echo "packing"
          cd output
          ls -al

      - name: Upload to Artifact
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: |
            output
          retention-days: 7
