name: unpack

on:
  workflow_dispatch:
     inputs:
       mode:
         description: 'Download mode(aria2c,curl,axel,wget)'
         required: true
         default: 'aria2c'
       output:
         description: 'Output(wget=O)'
         required: true
         default: 'o'
       filelink:
         description: 'Boot Link'
         required: true
       artifact:
         description: 'Upload to Artifact'
         required: true
         default: 'true'

jobs:
  unpack:
    runs-on: ubuntu-18.04
    continue-on-error: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialization environment
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install git openjdk-8-jdk wget curl rsync aria2 python python3 unzip device-tree-compiler brotli simg2img img2simg axel
          pip3 install protobuf
          pip install brotli

      - id: var
        name: Download
        run: |
          echo "Download"
          ${{ github.event.inputs.mode }} ${{ github.event.inputs.filelink }} -${{ github.event.inputs.output }} "boot.img"
          ls -al

      - name: ramdisk.cpio Extracting
        run: |
          mkdir tmp
          cp boot.img tmp
          cd tmp
          ../magiskboot unpack -h boot.img
          cp ramdisk.cpio ../output/
          ls
          cpio -i -F ramdisk.cpio
          ls -R
          cd ..

      - name: img_info && dts Extracting
        run: |
          echo "mkbooting"
          cp boot.img mkbootimg/
          cd mkbootimg
          ./mkboot boot.img boot
          rm boot.img
          cd boot
          cat img_info
          cp img_info ../../output/
          ls -R
          cd ../../
          mv mkbootimg/boot/kernel image.gz-dtb
          ./split-appended-dtb image.gz-dtb
          ls
          rm image.gz-dtb
          for i in `find *.dtb`; do
              dts=${i%.*}.dts
              dtc -q -I dtb -O dts -o $dts $i
              rm -rf $i
              if [ `grep -c "fstab" $dts` -ne '0' ];then
                  line="$(grep -n "firmware {" $dts)"
                  linea="$(echo $line | cut -d ":" -f 1)"
                  lineb="`expr $linea + 28`""p"
                  sed -n "$linea,$lineb" $dts
                  ls
                  cp $dts output/
              fi             
          done

      - name: dtbo.img Extracting
        continue-on-error: true
        run: |
          echo "mkdting"
          if [[ -f "dtbo.img" ]]; then
              cp dtbo.img dtbo2dts/
              cd dtbo2dts
              python dtbo2dtsi.py
              rm dtbo.img
              ls -al
              line="$(grep -n "vbmeta" dtsi.0)"
              linea="$(echo $line | cut -d ":" -f 1)"
              lineb="`expr $linea + 24`""p"
              sed -n "$linea,$lineb" dtsi.*
              cp dtsi.* ../output/
              cd ../
          fi

      - name: Packing
        run: |
          echo "packing"
          cd output
          ls -al

      - name: Upload to Artifact
        if: github.event.inputs.artifact == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: |
            output
          retention-days: 7
